import re
from datetime import datetime
from typing import Optional

class PhoneNumberHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏"""
    @staticmethod
    def format_phone(phone: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        Input: 89991234567 –∏–ª–∏ +79991234567
        Output: +7 (999) 123-45-67
        """
        # –û—á–∏—â–∞–µ–º –æ—Ç –≤—Å–µ–≥–æ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        digits = re.sub(r'\D', '', phone)
        
        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
        if len(digits) == 11 and digits[0] == '8':
            digits = '7' + digits[1:]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç 7 –≤ –Ω–∞—á–∞–ª–µ, –¥–æ–±–∞–≤–ª—è–µ–º
        if len(digits) == 10:
            digits = '7' + digits
            
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–ª–∏–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if len(digits) != 11:
            return phone
            
        return f"+{digits[0]} ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"

    @staticmethod
    def is_valid_phone(phone: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        - 9991234567 (10 —Ü–∏—Ñ—Ä)
        - 89991234567 (11 —Ü–∏—Ñ—Ä)
        - +79991234567 (11 —Ü–∏—Ñ—Ä —Å –ø–ª—é—Å–æ–º)
        """
        digits = re.sub(r'\D', '', phone)
        if len(digits) == 10:
            return True
        if len(digits) == 11 and digits[0] in ['7', '8']:
            return True
        return False

class DateTimeHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º"""
    @staticmethod
    def format_datetime(dt: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        return dt.strftime("%d.%m.%Y %H:%M")

    @staticmethod
    def get_readable_delta(dt: datetime) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–π —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        –ù–∞–ø—Ä–∏–º–µ—Ä: "5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥", "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥", "–≤—á–µ—Ä–∞"
        """
        now = datetime.now()
        delta = now - dt
        
        if delta.days > 30:
            return dt.strftime("%d.%m.%Y")
        elif delta.days > 1:
            return f"{delta.days} {'–¥–µ–Ω—å' if delta.days == 1 else '–¥–Ω—è' if 1 < delta.days < 5 else '–¥–Ω–µ–π'} –Ω–∞–∑–∞–¥"
        elif delta.days == 1:
            return "–≤—á–µ—Ä–∞"
        elif delta.seconds >= 3600:
            hours = delta.seconds // 3600
            return f"{hours} {'—á–∞—Å' if hours == 1 else '—á–∞—Å–∞' if 1 < hours < 5 else '—á–∞—Å–æ–≤'} –Ω–∞–∑–∞–¥"
        elif delta.seconds >= 60:
            minutes = delta.seconds // 60
            return f"{minutes} {'–º–∏–Ω—É—Ç—É' if minutes == 1 else '–º–∏–Ω—É—Ç—ã' if 1 < minutes < 5 else '–º–∏–Ω—É—Ç'} –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"

    @staticmethod
    def is_expired(dt: datetime, hours: int = 24) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à–ª–æ –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
        return (datetime.now() - dt).total_seconds() > hours * 3600

class TextHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º"""
    @staticmethod
    def clean_text(text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫"""
        if not text:
            return ""
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–µ
        return ' '.join(text.split())

    @staticmethod
    def truncate(text: str, length: int = 100, suffix: str = "...") -> str:
        """–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
        if not text:
            return ""
        if len(text) <= length:
            return text
        truncated = text[:length - len(suffix)].rsplit(' ', 1)[0]
        return truncated + suffix

    @staticmethod
    def sanitize_html(text: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        return re.sub(r'<[^>]+>', '', text)

class OrderHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏"""
    @staticmethod
    def generate_order_number(order_id: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
        –§–æ—Ä–º–∞—Ç: VK-2024-0001
        """
        return f"VK-{datetime.now().year}-{order_id:04d}"

    @staticmethod
    def format_order_status(status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
        statuses = {
            'new': '–ù–æ–≤–∞—è',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'deleted': '–£–¥–∞–ª–µ–Ω–∞',
            'updated': '–û–±–Ω–æ–≤–ª–µ–Ω–∞',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
        }
        return statuses.get(status.lower(), status)

    @staticmethod
    def get_status_emoji(status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
        emojis = {
            'new': 'üÜï',
            'in_progress': '‚ö°',
            'completed': '‚úÖ',
            'deleted': '‚ùå',
            'updated': 'üìù',
            'cancelled': 'üö´'
        }
        return emojis.get(status.lower(), '‚ùì')

    @staticmethod
    def is_valid_order_id(order_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            if not order_id.startswith('‚Ññ'):
                return False
            order_num = int(order_id[1:])
            return order_num > 0
        except (ValueError, IndexError):
            return False