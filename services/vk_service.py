import logging
import vk_api
import json
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from datetime import datetime
from typing import Optional, Dict, Any

from config.config import VK_TOKEN, VK_GROUP_ID
from models.order import Order
from services.storage_service import StorageService
from services.telegram_service import TelegramService
from utils.keyboard import create_keyboard, get_order_keyboard, get_main_keyboard

logger = logging.getLogger(__name__)

class VKService:
    def __init__(self):
    self.vk_session = vk_api.VkApi(token=VK_TOKEN)
    self.longpoll = VkBotLongPoll(self.vk_session, VK_GROUP_ID)
    self.vk = self.vk_session.get_api()
    self.storage = StorageService()
    self.user_states: Dict[int, str] = {}
    self.user_data: Dict[int, Dict[str, Any]] = {}

    def send_message(self, user_id: int, message: str, keyboard=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ï—Å–ª–∏ keyboard —É–∂–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
            keyboard_json = keyboard
            if isinstance(keyboard, dict):
                keyboard_json = json.dumps(keyboard, ensure_ascii=False)

            self.vk.messages.send(
                user_id=user_id,
                message=message,
                random_id=int(datetime.now().timestamp() * 1000),
                keyboard=keyboard_json
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def start_conversation(self, user_id: int):
        """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
        active_orders = self.storage.get_user_orders(str(user_id))
        
        if active_orders:
            buttons = ["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"]
            buttons.extend([f"–ó–∞—è–≤–∫–∞ ‚Ññ{order.id}" for order in active_orders])
            
            message = (
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {self.user_data[user_id]['name']}!\n\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            keyboard = create_keyboard(buttons)
            self.send_message(user_id, message, keyboard)
            self.user_states[user_id] = "choosing_action"
        else:
            message = (
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {self.user_data[user_id]['name']}! "
                "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ IT-–ü–æ–º–æ—â—å –≤ –ü–æ–≤–∞—Ä–æ–≤–æ.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:"
            )
            self.send_message(user_id, message, get_main_keyboard())
            self.user_states[user_id] = "awaiting_category"

    def handle_services_selection(self, user_id: int, is_business: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥"""
        if is_business:
            message = "–û–ø–∏—à–∏—Ç–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–∞–∫–∞—è –ø–æ–º–æ—â—å —Ç—Ä–µ–±—É–µ—Ç—Å—è:"
            self.user_states[user_id] = "awaiting_business_description"
        else:
            message = (
                "–ù–∞—à–∏ —É—Å–ª—É–≥–∏ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü:\n\n"
                "üîß –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –ø–æ–º–æ—â—å:\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤\n"
                "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤\n"
                "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
                "üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
                "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–±–æ—Ç–æ–≤\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n\n"
                "üì± –û–±—É—á–µ–Ω–∏–µ:\n"
                "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏\n"
                "‚Ä¢ –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É:"
            )
            self.user_states[user_id] = "awaiting_task_description"
        
        self.send_message(user_id, message)

    def request_contact(self, user_id: int):
        """–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        message = "–î–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        self.send_message(user_id, message)
        self.user_states[user_id] = "awaiting_phone"

    def handle_order_management(self, user_id: int, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π"""
        if text.startswith("–∑–∞—è–≤–∫–∞ ‚Ññ"):
            order_id = int(text.split("‚Ññ")[1])
            order = self.storage.get_order(str(user_id), order_id)
            if order:
                message = (
                    f"–ó–∞—è–≤–∫–∞ ‚Ññ{order.id}:\n"
                    f"–î–∞—Ç–∞: {order.date}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.task}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
                self.send_message(user_id, message, get_order_keyboard(order.id))
                self.user_data[user_id]["current_order"] = order.id
                self.user_states[user_id] = "managing_order"

    def handle_order_action(self, user_id: int, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π"""
        order_id = self.user_data[user_id]["current_order"]
        order = self.storage.get_order(str(user_id), order_id)
        
        if not order:
            self.start_conversation(user_id)
            return

        if text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É":
            self.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:")
            self.user_states[user_id] = "updating_order"
        
        elif text.lower() == "—É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É":
            if self.storage.delete_order(str(user_id), order_id):
                TelegramService.notify_order_delete(order)
                self.send_message(user_id, f"–ó–∞—è–≤–∫–∞ ‚Ññ{order_id} —É–¥–∞–ª–µ–Ω–∞")
            self.start_conversation(user_id)
        
        elif text.lower() == "–Ω–∞–∑–∞–¥":
            self.start_conversation(user_id)

    def process_new_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user_id = event.message.from_id
            text = event.message.text.lower() if event.message.text else ""

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.user_data:
                user_info = self.vk.users.get(user_ids=user_id)[0]
                self.user_data[user_id] = {"name": user_info["first_name"]}

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if text in ["", "–Ω–∞—á–∞—Ç—å", "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"]:
                self.start_conversation(user_id)
            
            elif text == "—É—Å–ª—É–≥–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—é":
                self.handle_services_selection(user_id, False)
            
            elif text == "—É—Å–ª—É–≥–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞":
                self.handle_services_selection(user_id, True)
            
            elif text == "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É":
                message = "–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å –≤ —ç—Ç–æ—Ç —Ä–∞–∑?"
                self.send_message(user_id, message, get_main_keyboard())
                self.user_states[user_id] = "awaiting_category"
            
            elif user_id in self.user_states:
                state = self.user_states[user_id]
                
                if state == "choosing_action":
                    if text.startswith("–∑–∞—è–≤–∫–∞ ‚Ññ"):
                        self.handle_order_management(user_id, text)
                    else:
                        self.start_conversation(user_id)
                
                elif state == "managing_order":
                    self.handle_order_action(user_id, text)
                
                elif state in ["awaiting_task_description", "awaiting_business_description"]:
                    self.user_data[user_id]["task"] = event.message.text
                    self.request_contact(user_id)
                
                elif state == "awaiting_phone":
                    self.process_phone_input(user_id, event.message.text)
                
                elif state == "updating_order":
                    self.process_order_update(user_id, event.message.text)
            
            else:
                self.start_conversation(user_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def process_phone_input(self, user_id: int, phone: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        self.user_data[user_id]["phone"] = phone
        message = (
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:\n\n"
            f"–ò–º—è: {self.user_data[user_id]['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {self.user_data[user_id]['task']}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )
        keyboard = create_keyboard(["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"])
        self.send_message(user_id, message, keyboard)
        self.user_states[user_id] = "awaiting_confirmation"

    def process_order_update(self, user_id: int, new_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        order_id = self.user_data[user_id]["current_order"]
        if self.storage.update_order(str(user_id), order_id, new_text):
            order = self.storage.get_order(str(user_id), order_id)
            if order:
                TelegramService.notify_order_update(order)
                self.send_message(user_id, f"–ó–∞—è–≤–∫–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        self.start_conversation(user_id)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞...")
        try:
            for event in self.longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    self.process_new_message(event)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")