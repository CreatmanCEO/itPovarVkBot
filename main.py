import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import requests
from flask import Flask, request, jsonify
import json
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã
VK_TOKEN = "vk1.a.KX1Q0v6Y3C420UgfV7zPoDL4V1OOYdengHYQjQyh_MtFvYca-M_871lyF0-g_qe-9Hn-MNA02wU73OjyBvX9uhh9aM9Afp7wbiBupahqPAoPoUZnEFC-BArLAYJCzX6PpN5sNnlw_qS5HlN9OASoNrvbJ2PFkIF48Dn9uqMG4zB995jvF4sk100fSSHiL5HlgclOrOs7qovLJKeyulnm8A"
TG_TOKEN = "8157141771:AAHxRzh3_kCS1amiPTaXw3FTYnN-GrBdt-g"
TG_CHAT_ID = "@CreatmanLead_bot"

# Flask –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Å–∞–π—Ç–∞
app = Flask(__name__)

class ITBot:
    def __init__(self):
        self.vk_session = vk_api.VkApi(token=VK_TOKEN)
        self.longpoll = VkBotLongPoll(self.vk_session, 228564877)
        self.vk = self.vk_session.get_api()
        self.user_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def send_to_telegram(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
            data = {"chat_id": TG_CHAT_ID, "text": message}
            response = requests.post(url, data=data)
            response.raise_for_status()
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message[:50]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

    def send_message(self, user_id, message, keyboard=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è VK —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            keyboard_json = json.dumps(keyboard) if keyboard else None
            self.vk.messages.send(
                user_id=user_id,
                message=message,
                random_id=int(datetime.now().timestamp() * 1000),
                keyboard=keyboard_json
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message[:50]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def create_keyboard(self, buttons):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not buttons or not isinstance(buttons, list):
            return None
        
        return {
            "one_time": False,
            "buttons": [
                [
                    {
                        "action": {
                            "type": "text",
                            "label": str(btn)[:40]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                        },
                        "color": "primary"
                    }
                ] for btn in buttons
            ]
        }

    def handle_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = event.message.from_id
            text = event.message.text.lower() if event.message.text else ""
            user_info = self.vk.users.get(user_ids=user_id)[0]
            user_name = user_info["first_name"]

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text} –æ—Ç {user_name} ({user_id})")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if text in ["", "–Ω–∞—á–∞—Ç—å", "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"]:
                self.handle_greeting(user_id, user_name)
            elif text == "—É—Å–ª—É–≥–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—é":
                self.handle_personal_services(user_id)
            elif text == "—É—Å–ª—É–≥–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞":
                self.handle_business_services(user_id)
            elif text == "–¥–∞":
                self.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
                self.user_states[user_id] = "awaiting_company_description"
            elif text == "–Ω–µ—Ç":
                self.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –ø–æ–º–æ—â—å –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è:")
                self.user_states[user_id] = "awaiting_help_description"
            elif user_id in self.user_states:
                self.handle_user_input(user_id, text, user_name)
            else:
                self.handle_unknown_command(user_id, user_name)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")
            self.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def handle_greeting(self, user_id, user_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        message = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ‚Äî IT-–ü–æ–º–æ—â—å –≤ –ü–æ–≤–∞—Ä–æ–≤–æ.\n"
            "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è:\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
            "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç–µ —Å –ò–ò –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –µ—â–µ –º–Ω–æ–≥–æ —á–µ–º...\n\n"
            "–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
        )
        keyboard = self.create_keyboard(["–£—Å–ª—É–≥–∏ –ù–∞—Å–µ–ª–µ–Ω–∏—é", "–£—Å–ª—É–≥–∏ –¥–ª—è –ë–∏–∑–Ω–µ—Å–∞"])
        self.send_message(user_id, message, keyboard)

    def handle_personal_services(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ª—É–≥ –¥–ª—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è"""
        message = (
            "–ù–∞—à–∏ —É—Å–ª—É–≥–∏ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü:\n\n"
            "üîß –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –ø–æ–º–æ—â—å:\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤\n"
            "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
            "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–±–æ—Ç–æ–≤\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n\n"
            "üì± –û–±—É—á–µ–Ω–∏–µ:\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏\n"
            "‚Ä¢ –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É, –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!"
        )
        self.send_message(user_id, message)
        self.user_states[user_id] = "awaiting_personal_task"

    def handle_business_services(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ª—É–≥ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞"""
        message = (
            "–î–ª—è –ø–æ–¥–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞, "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∫—Ä–∞—Ç—Ü–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
        )
        keyboard = self.create_keyboard(["–î–∞", "–ù–µ—Ç"])
        self.send_message(user_id, message, keyboard)

    def handle_user_input(self, user_id, text, user_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        state = self.user_states.pop(user_id)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        if state in ["awaiting_company_description", "awaiting_help_description", "awaiting_personal_task"]:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
            message_type = {
                "awaiting_company_description": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
                "awaiting_help_description": "–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏",
                "awaiting_personal_task": "–õ–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
            }[state]
            
            tg_message = (
                f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"–¢–∏–ø: {message_type}\n"
                f"–ò–º—è: {user_name}\n"
                f"ID: {user_id}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {text}"
            )
            self.send_to_telegram(tg_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response = (
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∏—Ö –∑–∞–¥–∞–≤–∞—Ç—å."
            )
            self.send_message(user_id, response)

    def handle_unknown_command(self, user_id, user_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        message = (
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, {user_name}, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π:"
        )
        keyboard = self.create_keyboard(["–£—Å–ª—É–≥–∏ –ù–∞—Å–µ–ª–µ–Ω–∏—é", "–£—Å–ª—É–≥–∏ –¥–ª—è –ë–∏–∑–Ω–µ—Å–∞"])
        self.send_message(user_id, message, keyboard)

@app.route("/submit", methods=["POST"])
def handle_form_submission():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞"""
    try:
        data = request.json
        required_fields = ["name", "phone", "message"]
        
        if not all(field in data for field in required_fields):
            return jsonify({"error": "–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

        tg_message = (
            "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:\n"
            f"–ò–º—è: {data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}"
        )
        
        bot.send_to_telegram(tg_message)
        return jsonify({"success": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã: {e}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

if __name__ == "__main__":
    import threading

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ITBot()

    # –ó–∞–ø—É—Å–∫–∞–µ–º VK Bot
    def vk_bot():
        logger.info("–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞...")
        try:
            for event in bot.longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    bot.handle_event(event)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –∏ VK –±–æ—Ç
    vk_thread = threading.Thread(target=vk_bot, daemon=True)
    vk_thread.start()
    
    logger.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(host="0.0.0.0", port=5000)